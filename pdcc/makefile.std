# Released to the public domain.
#
# Anyone and anything may copy, edit, publish,
# use, compile, sell and distribute this work
# and all its parts in any form for any purpose,
# commercial and non-commercial, without any restrictions,
# without complying with any conditions
# and by any means.




ifeq "$(targ)" "zpg"
# Produces z/PDOS-generic executable.
# Links with PDPCLIB created by makefile.zpg
CC=gcc370
CFLAGS=-Os
AS=as370
AR=ar370
LD=pdld
LDFLAGS=-s --no-insert-timestamp
COPTS=-S $(CFLAGS) -fno-common -ansi -Icclib -Icclib/include -Icpplib \
    -Icpplib/include -I. -I../pdpclib \
    -U__MVS__ -D__MF32__ -D__PDOSGEN__ -D__NOBIVA__ \
    -I../generic -I../src
EXTRA1=--oformat mvs ../pdpclib/pgastart.o


else ifeq "$(targ)" "macarm"
# makefile.m64 needs to have been run in pdpclib first
# untested
CC=clang -S -O0 -D__ARM__ -fno-builtin -D__MACOS__ \
   -D__64BIT__ -fno-stack-protector -D__USEBIVA__ \
   -Wno-error=implicit-function-declaration \
   -Icclib -Icclib/include -Icpplib \
   -Icpplib/include -I. -I../pdpclib
AR=ar
AS=as
LD=clang -Wl,-e, -Wl,__start
EXTRA2=../pdpclib/pdpmacos.a


else ifeq "$(targ)" "gccarm64"
# makefile.a64 needs to have been run in pdpclib first
# untested
CC=gcc -S -O2 -D__ARM__ -nostdinc -nostdlib -fno-builtin \
   -D__64BIT__ -fno-stack-protector --no-pie -D__USEBIVA__ \
   -Icclib -Icclib/include -Icpplib \
   -Icpplib/include -I. -I../pdpclib
AR=ar
AS=as
LD=gcc -static -s -m64 -nostdlib
EXTRA1=../pdpclib/linstart.o ../pdpclib/pdplinux.a
EXTRA2=../pdpclib/pdplinux.a


else ifeq "$(targ)" "gccamd64"
# makefile.l64 needs to have been run in pdpclib first
# untested
CC=gcc -S -O0 -D__gnu_linux__ -nostdinc -nostdlib -fno-builtin \
   -D__64BIT__ -fno-stack-protector --no-pie -D__USEBIVA__ \
   -m64 -fno-common \
   -Icclib -Icclib/include -Icpplib \
   -Icpplib/include -I. -I../pdpclib
AR=ar
AS=as
LD=gcc -s -static -m64 -nostdlib
EXTRA1=../pdpclib/linstart.o ../pdpclib/pdplinux.a
EXTRA2=../pdpclib/pdplinux.a





else
# Produces Windows executable.
# Links with PDPCLIB created by makefile.std
CC=gccwin
CFLAGS=-O2
LD=pdld
LDFLAGS=-s --no-insert-timestamp
AS=pdas --oformat coff
AR=xar
COPTS=-S $(CFLAGS) -fno-common -ansi -Icclib -Icclib/include -Icpplib \
    -Icpplib/include -I. -I../pdpclib -D__WIN32__ -D__NOBIVA__
EXTRA1=../pdpclib/w32start.obj
EXTRA2=../pdpclib/msvcrt.lib
endif




all: clean pdcc.exe

pdcc.exe: main.obj c_ppout.obj inc_path.obj cpplib.lib cclib.lib
    $(LD) $(LDFLAGS) -o pdcc.exe $(EXTRA1) main.obj c_ppout.obj inc_path.obj cpplib.lib cclib.lib $(EXTRA2)

cpplib.lib: cpplib/core.obj cpplib/directs.obj cpplib/errors.obj \
          cpplib/expr.obj cpplib/files.obj cpplib/chars.obj \
          cpplib/idents.obj cpplib/init.obj cpplib/lex.obj \
          cpplib/macro.obj cpplib/support.obj cpplib/symtab.obj \
          xmalloc.obj
    rm -f cpplib.lib
    $(AR) r cpplib.lib cpplib/core.obj cpplib/directs.obj cpplib/errors.obj
    $(AR) r cpplib.lib cpplib/expr.obj cpplib/files.obj cpplib/chars.obj
    $(AR) r cpplib.lib cpplib/idents.obj cpplib/init.obj cpplib/lex.obj
    $(AR) r cpplib.lib cpplib/macro.obj cpplib/support.obj cpplib/symtab.obj
    $(AR) r cpplib.lib xmalloc.obj
    $(AR) s cpplib.lib

cclib.lib: cclib/cclib.obj cclib/asgen.obj cclib/lexer.obj cclib/diag.obj \
         xmalloc.obj
    rm -f cclib.lib
    $(AR) r cclib.lib cclib/cclib.obj cclib/asgen.obj cclib/lexer.obj cclib/diag.obj
    $(AR) s cclib.lib

.c.obj:
    $(CC) $(COPTS) -o $*.s $<
    $(AS) -o $@ $*.s
    rm -f $*.s

clean:
    rm -f *.obj cpplib/*.obj cpplib.lib cclib/*.obj cclib.lib pdcc.exe
